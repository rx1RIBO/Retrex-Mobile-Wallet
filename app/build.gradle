apply plugin: 'com.android.application'

def my_boost_dir = local_props("boost.dir")
def my_boost_dir_libs = my_boost_dir + "/libs/llvm"
def my_boost_dir_inc  = my_boost_dir + "/include"

def my_crypto_dir = local_props("crypto.dir")
def my_crypto_dir_libs = my_crypto_dir
def my_crypto_dir_inc  = my_crypto_dir + "/include"

android {
    compileSdkVersion 28
    useLibrary 'org.apache.http.legacy'
    defaultConfig {
        applicationId "rext.tech.furszy"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 29
        versionName "3.1.4"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        externalNativeBuild {
            cmake {
                // flags for the c++ compiler eg "-std=c++14 -frtti -fexceptions"
                cppFlags "-std=c++11"

                // this causes libc++_shared.so to get packaged into .apk
                arguments '-DANDROID_STL=c++_shared'
                arguments '-DANDROID_TOOLCHAIN=clang'
                //arguments '-DANDROID_ALLOW_UNDEFINED_SYMBOLS=true'

                // This is used in CMakeLists.txt so our native code can find/use (prebuilt) boost
                arguments '-DMY_BOOST_LIBS_DIR=' + my_boost_dir_libs
                arguments '-DMY_BOOST_INC_DIR='  + my_boost_dir_inc


                arguments '-DMY_OPENSSL_CRYPTO_LIBS_DIR=' + my_crypto_dir_libs
                arguments '-DMY_OPENSSL_CRYPTO_INC_DIR='  + my_crypto_dir_inc

            }
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    sourceSets{
        main{
            assets.srcDirs = ['assets']
            jni {
                srcDirs = []
            }

            jniLibs {
                srcDir 'libs'
            }
            jniLibs.srcDirs = [
                    my_boost_dir_libs,
                    my_crypto_dir_libs
            ]
        }
    }

    configurations {
        all {
            exclude module: 'httpclient'
        }
    }


}


configurations.all {
    resolutionStrategy { force 'org.objenesis:objenesis:2.1' }

}


dependencies {
    //compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:support-v4:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'
    implementation 'com.bignerdranch.android:expandablerecyclerview:3.0.0-RC1'
    implementation 'com.wang.avi:library:2.1.3'
    implementation 'com.google.android:flexbox:0.3.0'
    implementation 'za.co.riggaroo:materialhelptutorial:1.2.0'
    implementation('com.github.tony19:logback-android-classic:1.1.1-5') {
        exclude(group: 'com.google.android', module: 'android')
    }
    implementation "android.arch.lifecycle:extensions:1.1.0"
    implementation "android.arch.lifecycle:viewmodel:1.1.0"
    implementation 'com.github.anrwatchdog:anrwatchdog:1.3.0'
    //qr
    implementation 'com.google.zxing:core:3.3.0'
    // db
    implementation 'com.snappydb:snappydb-lib:0.5.2'
    implementation 'ch.acra:acra:4.9.2'
    //implementation 'com.bugsee:bugsee-android:+'
    implementation project(':mobile')
    testImplementation project(':mobile')
    implementation 'com.github.clans:fab:1.6.4'
    testImplementation 'org.slf4j:slf4j-api:1.7.20'
    testImplementation 'org.slf4j:slf4j-simple:1.7.5'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.apache.httpcomponents:httpclient:4.5.3'
    testImplementation 'org.mockito:mockito-core:2.8.9'
    implementation ('com.airbnb.android:lottie:2.5.5'){ exclude group: 'com.android.support' }

}

//------------------------------------------------------------
def local_props(key) { // reads ~ value from local.properties file
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def val = properties.getProperty(key, null)
    if (val == null)
        throw new GradleException("""\
                cant find value '${key}' in file 'local.properties'.  """)

    return val
}
